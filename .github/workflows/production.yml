name: production

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install client dependencies
        working-directory: ./client
        run: npm install

      # - name: Test client
      #   working-directory: ./client
      #   run: npm test

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Install server dependencies
        working-directory: ./server
        run: npm install

      - name: Server test
        working-directory: ./server
        run: npm run test:ci
        env:
          NODE_ENV: test
          PORT: 5000
          SECRET_OR_KEY: test_secret

      - name: Build server
        working-directory: ./server
        run: npm run build:prod

      - name: Copy client build to server
        run: cp -r ./client/build ./server/dist/build

    # services:
    #   postgres:
    #     image: postgres:latest
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #       POSTGRES_DB: test
    #     ports:
    #       - 5432:5432
    #     options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

  deploy:
    name: Deploy to Render
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Docker
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/logger:latest ./server

      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/logger:latest

      - name: Deploy to Render
        run: |
          curl -XPOST "https://api.render.com/v1/services" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
                "name": "logger",
                "type": "docker",
                "env": ["NODE_ENV=production"],
                "dockerOptions": {
                    "image": "${{ secrets.DOCKERHUB_USERNAME }}/logger:latest"
                },
                "plan": "free",
                "automaticDeploy": true
              }'
